
@misc{AbramovMixinsConsideredHarmful2016,
  timestamp = {2018-12-17T13:18:36Z},
  title = {Mixins {{Considered Harmful}} \textendash{} {{React Blog}}},
  abstract = {``How do I share the code between several components?'' is one of the first questions that people ask when they learn React. Our answer has always been to use component composition for code reuse. You can define a component and use it in several other components. It is not always obvious how a certain pattern can be solved with composition. React is influenced by functional programming but it came into the field that was dominated by object-oriented libraries. It was hard for engineers both inside\ldots{}},
  language = {en},
  urldate = {2018-10-15},
  url = {https://reactjs.org/blog/2016/07/13/mixins-considered-harmful.html},
  author = {Abramov, Dan},
  month = jul,
  year = {2016}
}
% == BibTeX quality report for AbramovMixinsConsideredHarmful2016:
% Missing required field 'howpublished'
% ? Title looks like it was stored in title-case in Zotero

@misc{Bagnardimixinsreactes62018,
  timestamp = {2018-10-24T15:23:40Z},
  title = {Mixins in React with Es6 Style Classes. {{Contribute}} to Brigand/React-Mixin Development by Creating an Account on {{GitHub}}},
  copyright = {MIT},
  urldate = {2018-10-24},
  url = {https://github.com/brigand/react-mixin},
  author = {Bagnardi, Frankie},
  month = oct,
  year = {2018}
}
% == BibTeX quality report for Bagnardimixinsreactes62018:
% Missing required field 'howpublished'

@misc{ClarkMinimalisomorphicFlux2018,
  timestamp = {2018-10-24T15:52:06Z},
  title = {Minimal, Isomorphic {{Flux}}. {{Contribute}} to Acdlite/Flummox Development by Creating an Account on {{GitHub}}},
  urldate = {2018-10-24},
  url = {https://github.com/acdlite/flummox/blob/v3.5.1/docs/docs/guides/why-flux-component-is-better-than-flux-mixin.md},
  author = {Clark, Andrew},
  month = oct,
  year = {2018}
}
% == BibTeX quality report for ClarkMinimalisomorphicFlux2018:
% Missing required field 'howpublished'

@phdthesis{BrachaprogramminglanguageJigsaw1992,
  timestamp = {2018-10-26T16:55:08Z},
  title = {The Programming Language {{Jigsaw}}: Mixins, Modularity and Multiple Inheritance},
  shorttitle = {The Programming Language {{Jigsaw}}},
  language = {English},
  url = {https://www.researchgate.net/profile/Gilad_Bracha/publication/2739177_The_Programming_Language_Jigsaw_Mixins_Modularity_And_Multiple_Inheritance/links/02e7e53348d6821df0000000.pdf},
  author = {Bracha, Gilad},
  year = {1992},
  note = {OCLC: 25301362}
}
% == BibTeX quality report for BrachaprogramminglanguageJigsaw1992:
% Missing required field 'school'

@article{MatsuokaAnalysisinheritanceanomaly1993,
  timestamp = {2018-10-26T17:00:39Z},
  title = {Analysis of Inheritance Anomaly in Object-Oriented Concurrent Programming Languages},
  volume = {3},
  journal = {Research directions in concurrent object-oriented programming},
  url = {https://www.researchgate.net/profile/Akinori_Yonezawa2/publication/2632031_Analysis_of_Inheritance_Anomaly_in_Object-Oriented_Concurrent_Programming_Languages/links/53eb07460cf28f342f44f14c/Analysis-of-Inheritance-Anomaly-in-Object-Oriented-Concurrent-Programming-Languages.pdf},
  author = {Matsuoka, Satoshi and Yonezawa, Akinori},
  year = {1993},
  pages = {107--150}
}
% == BibTeX quality report for MatsuokaAnalysisinheritanceanomaly1993:
% Missing required field 'number'

@misc{DecoratorsES6classes2018,
  timestamp = {2018-11-02T11:55:52Z},
  title = {Decorators for {{ES6}} Classes. {{Contribute}} to Tc39/Proposal-Decorators Development by Creating an Account on {{GitHub}}},
  urldate = {2018-11-02},
  howpublished = {Ecma TC39},
  url = {https://github.com/tc39/proposal-decorators},
  month = nov,
  year = {2018}
}
% == BibTeX quality report for DecoratorsES6classes2018:
% Missing required field 'author'

@book{SimpsonThisobjectprototypes2014,
  timestamp = {2018-12-20T14:26:02Z},
  address = {Beijing; Sebastopol, CA},
  edition = {First edition},
  series = {You don't know JS},
  title = {This \& Object Prototypes},
  isbn = {978-1-4919-0415-2},
  lccn = {QA76.73.J39 S56 2014},
  language = {en},
  publisher = {{O'Reilly}},
  author = {Simpson, Kyle},
  year = {2014},
  keywords = {JavaScript (Computer program language)},
  note = {OCLC: ocn891619771}
}

@book{HaverbekeEloquentJavaScriptmodern2011,
  timestamp = {2018-11-04T13:05:56Z},
  address = {San Francisco, Calif.},
  title = {Eloquent {{JavaScript}} : A Modern Introduction to Programming},
  isbn = {978-1-59327-282-1},
  shorttitle = {Eloquent {{JavaScript}}},
  publisher = {{No Starch Press}},
  author = {Haverbeke, Marijn},
  year = {2011}
}

@misc{ElliottJavaScriptFactoryFunctions2016,
  timestamp = {2018-11-07T20:24:21Z},
  title = {{{JavaScript Factory Functions}} vs {{Constructor Functions}} vs {{Classes}}},
  abstract = {Prior to ES6, there was a lot of confusion about the differences between a factory function and a constructor function in JavaScript. Since\ldots{}},
  urldate = {2018-11-07},
  journal = {Medium},
  url = {https://medium.com/javascript-scene/javascript-factory-functions-vs-constructor-functions-vs-classes-2f22ceddf33e},
  author = {Elliott, Eric},
  month = jun,
  year = {2016}
}
% == BibTeX quality report for ElliottJavaScriptFactoryFunctions2016:
% Missing required field 'howpublished'
% ? Title looks like it was stored in title-case in Zotero

@misc{ElliottTwoPillarsJavaScript2014,
  timestamp = {2018-11-07T20:35:40Z},
  title = {The {{Two Pillars}} of {{JavaScript}}},
  abstract = {Part 1: How to Escape the 7th Circle of Hell},
  urldate = {2018-11-07},
  journal = {JavaScript Scene},
  url = {https://medium.com/javascript-scene/the-two-pillars-of-javascript-ee6f3281e7f3},
  author = {Elliott, Eric},
  month = oct,
  year = {2014}
}
% == BibTeX quality report for ElliottTwoPillarsJavaScript2014:
% Missing required field 'howpublished'
% ? Title looks like it was stored in title-case in Zotero

@misc{FunctionalMixinsECMAScript,
  timestamp = {2018-11-07T21:05:23Z},
  title = {Functional {{Mixins}} in {{ECMAScript}} 2015},
  urldate = {2018-11-07},
  url = {http://raganwald.com/2015/06/17/functional-mixins.html}
}
% == BibTeX quality report for FunctionalMixinsECMAScript:
% Missing required field 'author'
% Missing required field 'howpublished'
% Missing required field 'year'
% ? Title looks like it was stored in title-case in Zotero

@misc{UsingESlater,
  timestamp = {2018-11-07T21:05:27Z},
  title = {Using {{ES}}.Later {{Decorators}} as {{Mixins}}},
  urldate = {2018-11-07},
  url = {http://raganwald.com/2015/06/26/decorators-in-es7.html}
}
% == BibTeX quality report for UsingESlater:
% Missing required field 'author'
% Missing required field 'howpublished'
% Missing required field 'year'

@misc{OsmaniExploringEcmaScriptDecorators2015,
  timestamp = {2018-11-07T21:05:31Z},
  title = {Exploring {{EcmaScript Decorators}}},
  abstract = {Iterators, generators and array comprehensions; The similarities between JavaScript and Python continue to increase over time and I for one\ldots{}},
  urldate = {2018-11-07},
  journal = {Google Developers},
  url = {https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841},
  author = {Osmani, Addy},
  month = jul,
  year = {2015}
}
% == BibTeX quality report for OsmaniExploringEcmaScriptDecorators2015:
% Missing required field 'howpublished'
% ? Title looks like it was stored in title-case in Zotero

@misc{AbramovMixinsAreDead2015a,
  timestamp = {2018-11-07T21:15:53Z},
  title = {Mixins {{Are Dead}}. {{Long Live Composition}}},
  abstract = {When React 0.13 came out, everybody freaked out.},
  urldate = {2018-11-07},
  journal = {Dan Abramov},
  url = {https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750},
  author = {Abramov, Dan},
  month = mar,
  year = {2015}
}
% == BibTeX quality report for AbramovMixinsAreDead2015a:
% Missing required field 'howpublished'
% ? Title looks like it was stored in title-case in Zotero

@misc{BraithwaiteReginaldBraithwaite,
  timestamp = {2018-11-09T20:42:54Z},
  title = {Reginald {{Braithwaite}}},
  urldate = {2018-11-09},
  url = {http://raganwald.com/},
  author = {Braithwaite, Reginald}
}
% == BibTeX quality report for BraithwaiteReginaldBraithwaite:
% Missing required field 'howpublished'
% Missing required field 'year'
% ? Title looks like it was stored in title-case in Zotero

@misc{BraithwaiteWhyAreMixins2016,
  timestamp = {2018-12-17T15:08:27Z},
  title = {Why {{Are Mixins Considered Harmful}}?},
  urldate = {2018-11-25},
  url = {http://raganwald.com/2016/07/16/why-are-mixins-considered-harmful.html},
  author = {Braithwaite, Reginald},
  month = jul,
  year = {2016}
}
% == BibTeX quality report for BraithwaiteWhyAreMixins2016:
% Missing required field 'howpublished'
% ? Title looks like it was stored in title-case in Zotero

@misc{CrollfreshlookJavaScript2011,
  timestamp = {2018-11-25T16:37:10Z},
  title = {A Fresh Look at {{JavaScript Mixins}}},
  abstract = {(Russian, Japanese) In this article I'll explore JavaScript mixins in detail, and introduce a less conventional, but to my mind more natural mixin strategy that I hope you'll find usefu\ldots{}},
  language = {en},
  urldate = {2018-11-25},
  journal = {JavaScript, JavaScript...},
  url = {https://javascriptweblog.wordpress.com/2011/05/31/a-fresh-look-at-javascript-mixins/},
  author = {Croll, Angus},
  month = may,
  year = {2011}
}
% == BibTeX quality report for CrollfreshlookJavaScript2011:
% Missing required field 'howpublished'
% ? Possibly abbreviated journal title JavaScript, JavaScript...

@misc{FunStampsEpisode,
  timestamp = {2018-11-25T17:18:38Z},
  title = {Fun with {{Stamps}}. {{Episode}} 1. {{Stamp}} Basics \textendash{} {{Vasyl Boroviak}} \textendash{} {{Medium}}},
  urldate = {2018-11-25},
  url = {https://medium.com/@koresar/fun-with-stamps-episode-1-stamp-basics-e0627d81efe0}
}
% == BibTeX quality report for FunStampsEpisode:
% Missing required field 'author'
% Missing required field 'howpublished'
% Missing required field 'year'

@misc{DecoratorsES6classes2018a,
  timestamp = {2018-11-25T17:30:48Z},
  title = {Decorators for {{ES6}} Classes. {{Contribute}} to Tc39/Proposal-Decorators Development by Creating an Account on {{GitHub}}},
  urldate = {2018-11-25},
  howpublished = {Ecma TC39},
  url = {https://github.com/tc39/proposal-decorators},
  month = nov,
  year = {2018}
}
% == BibTeX quality report for DecoratorsES6classes2018a:
% Missing required field 'author'

@article{KruegerSoftwareReuse1992a,
  timestamp = {2018-11-28T08:42:03Z},
  title = {Software {{Reuse}}},
  volume = {24},
  issn = {0360-0300},
  doi = {10.1145/130844.130856},
  abstract = {Software reuse is the process of creating software systems from existing software rather than building software systems from scratch. This simple yet powerful vision was introduced in 1968. Software reuse has, however, failed to become a standard software engineering practice. In an attempt to understand why, researchers have renewed their interest in software reuse and in the obstacles to implementing it. This paper surveys the different approaches to software reuse found in the research literature. It uses a taxonomy to describe and compare the different approaches and make generalizations about the field of software reuse. The taxonomy characterizes each reuse approach in terms of its reusable artifacts and the way these artifacts are abstracted, selected, specialized, and integrated. Abstraction plays a central role in software reuse. Concise and expressive abstractions are essential if software artifacts are to be effectively reused. The effectiveness of a reuse technique can be evaluated in terms of cognitive distance\textemdash{}an intuitive gauge of the intellectual effort required to use the technique. Cognitive distance is reduced in two ways: (1) Higher level abstractions in a reuse technique reduce the effort required to go from the initial concept of a software system to representations in the reuse technique, and (2) automation reduces the effort required to go from abstractions in a reuse technique to an executable implementation. This survey will help answer the following questions: What is software reuse? Why reuse software? What are the different approaches to reusing software? How effective are the different approaches? What is required to implement a software reuse technology? Why is software reuse difficult? What are the open areas for research in software reuse?},
  number = {2},
  journal = {ACM Comput. Surv.},
  author = {Krueger, Charles W.},
  month = jun,
  year = {1992},
  pages = {131--183}
}
% == BibTeX quality report for KruegerSoftwareReuse1992a:
% ? Possibly abbreviated journal title ACM Comput. Surv.
% ? Title looks like it was stored in title-case in Zotero

@inproceedings{nato68components,
  timestamp = {2018-11-28T08:47:41Z},
  address = {Garmisch, Germany},
  title = {Mass-{{Produced Software Components}}},
  booktitle = {Proceedings of {{NATO Software Engineering Conference}}},
  author = {McIlroy, Doug},
  editor = {Naur, P. and Randell, B.},
  month = oct,
  year = {1968},
  keywords = {components history key-reading},
  pages = {138-155},
  biburl = {https://www.bibsonomy.org/bibtex/2569a161bf1aa24787b4c0b76c82e8750/stammel},
  interhash = {7d18f1f2acae2801dd7e9a5534cb6748},
  intrahash = {569a161bf1aa24787b4c0b76c82e8750},
  username = {pbrada}
}
% == BibTeX quality report for nato68components:
% Missing required field 'publisher'
% ? Title looks like it was stored in title-case in Zotero

@book{international2018ecmascript,
  timestamp = {2018-12-20T13:36:22Z},
  address = {Geneva},
  edition = {9th},
  title = {{{ECMAScript}} 2018 {{Language Specification}}},
  urldate = {2018-11-28},
  publisher = {{ECMA International}},
  url = {https://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf},
  author = {ECMA TC39 and Terlson, Brian},
  year = {2018},
  keywords = {ecmascript}
}
% == BibTeX quality report for international2018ecmascript:
% ? Title looks like it was stored in title-case in Zotero

@book{ElliottProgrammingJavaScriptapplications2014,
  timestamp = {2018-12-20T14:24:39Z},
  address = {Beijing; Sebastopol},
  edition = {First edition},
  title = {Programming {{JavaScript}} Applications},
  isbn = {978-1-4919-5029-6},
  lccn = {QA76.73.J39 E45 2014},
  language = {en},
  publisher = {{O'Reilly}},
  author = {Elliott, Eric},
  year = {2014},
  keywords = {JavaScript (Computer program language),Application software,Computer algorithms,Development},
  note = {OCLC: ocn867765966}
}

@book{SimpsonScopeclosures2014,
  timestamp = {2018-11-28T16:11:34Z},
  address = {Beijing},
  edition = {First edition},
  series = {You don't know JS},
  title = {Scope and Closures},
  isbn = {978-1-4493-3558-8},
  lccn = {QA76.73.J39 S555 2014},
  language = {en},
  publisher = {{O'Reilly}},
  author = {Simpson, Kyle},
  year = {2014},
  keywords = {Java (Computer program language)},
  note = {OCLC: ocn881367580}
}

@misc{MozillaFoundationWorkingobjects,
  timestamp = {2018-11-28T21:36:42Z},
  title = {Working with Objects},
  abstract = {JavaScript is designed on a simple object-based paradigm. An object is a collection of properties, and a property is an association between a name (or key) and a value. A property's value can be a function, in which case the property is known as a method. In addition to objects that are predefined in the browser, you can define your own objects. This chapter describes how to use objects, properties, functions, and methods, and how to create your own objects.},
  language = {en-US},
  urldate = {2018-11-28},
  journal = {MDN Web Docs},
  url = {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects},
  author = {Mozilla Foundation}
}
% == BibTeX quality report for MozillaFoundationWorkingobjects:
% Missing required field 'howpublished'
% Missing required field 'year'

@misc{MozillaFoundationInheritanceprototypechain,
  timestamp = {2018-11-28T21:36:37Z},
  title = {Inheritance and the Prototype Chain},
  abstract = {JavaScript is a bit confusing for developers experienced in class-based languages (like Java or C++), as it is dynamic and does not provide a class implementation per se (the class keyword is introduced in ES2015, but is syntactical sugar, JavaScript remains prototype-based).},
  language = {en-US},
  urldate = {2018-11-28},
  journal = {MDN Web Docs},
  url = {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain},
  author = {Mozilla Foundation}
}
% == BibTeX quality report for MozillaFoundationInheritanceprototypechain:
% Missing required field 'howpublished'
% Missing required field 'year'

@book{StefanovJavaScriptpatternsbuild2010,
  timestamp = {2018-12-04T21:13:20Z},
  address = {Beijing [u.a.]},
  edition = {1. ed.},
  series = {Yahoo! Press},
  title = {{{JavaScript}} Patterns : [Build Better Applications with Coding and Design Patterns]},
  isbn = {978-0-596-80675-0},
  shorttitle = {{{JavaScript}} Patterns},
  publisher = {{O'Reilly}},
  author = {Stefanov, Stoyan},
  year = {2010}
}

@misc{ElliottMasterJavaScriptInterview2016,
  timestamp = {2018-12-07T09:06:10Z},
  title = {Master the {{JavaScript Interview}}: {{What}}'s the {{Difference Between Class}} \& {{Prototypal Inheritance}}?},
  shorttitle = {Master the {{JavaScript Interview}}},
  abstract = {``Master the JavaScript Interview'' is a series of posts designed to prepare candidates for common questions they are likely to encounter\ldots{}},
  urldate = {2018-12-07},
  journal = {Medium},
  url = {https://medium.com/javascript-scene/master-the-javascript-interview-what-s-the-difference-between-class-prototypal-inheritance-e4cd0a7562e9},
  author = {Elliott, Eric},
  month = jan,
  year = {2016}
}
% == BibTeX quality report for ElliottMasterJavaScriptInterview2016:
% Missing required field 'howpublished'
% ? Title looks like it was stored in title-case in Zotero

@article{Listprogramminglanguages2018,
  timestamp = {2018-12-07T09:08:37Z},
  title = {List of Programming Languages by Type},
  copyright = {Creative Commons Attribution-ShareAlike License},
  abstract = {This is a list of notable programming languages, grouped by type.
Since there is no overarching classification scheme for programming languages, in many cases, a language will be listed under multiple headings.},
  language = {en},
  urldate = {2018-12-07},
  journal = {Wikipedia},
  url = {https://en.wikipedia.org/wiki/List_of_programming_languages_by_type\#Object-oriented_class-based_languages},
  month = dec,
  year = {2018},
  note = {Page Version ID: 872413563}
}
% == BibTeX quality report for Listprogramminglanguages2018:
% Missing required field 'author'
% Missing required field 'number'
% Missing required field 'pages'
% Missing required field 'volume'

@unpublished{SteimannObjektorientierteProgrammierung,
  timestamp = {2018-12-08T13:40:45Z},
  title = {Objektorientierte {{Programmierung}}},
  author = {Steimann, Friedrich and Keller, Daniela}
}
% == BibTeX quality report for SteimannObjektorientierteProgrammierung:
% I don't know how to quality-check unpublished references

@unpublished{SteimannModerneProgrammiertechnikenund,
  timestamp = {2018-12-08T13:41:51Z},
  title = {Moderne {{Programmiertechniken}} Und -Methoden},
  author = {Steimann, Friedrich and Keller, Daniela}
}
% == BibTeX quality report for SteimannModerneProgrammiertechnikenund:
% I don't know how to quality-check unpublished references

@book{GoF,
  timestamp = {2018-12-16T13:09:23Z},
  address = {Reading, Mass},
  edition = {32. printing},
  series = {Addison-Wesley professional computing series},
  title = {Design Patterns: Elements of Reusable Object-Oriented Software},
  isbn = {978-0-201-63361-0},
  lccn = {QA76.64 .D47 1995},
  shorttitle = {Design Patterns},
  publisher = {{Addison-Wesley}},
  editor = {Gamma, Erich},
  year = {1995}
}
% == BibTeX quality report for GoF:
% Missing required field 'author'

@misc{MozillaDeveloperNetworkObjectsetPrototypeOf,
  timestamp = {2018-12-20T14:22:46Z},
  title = {Object.{{setPrototypeOf}}()},
  abstract = {The Object.setPrototypeOf() method sets the prototype (i.e., the internal [[Prototype]] property) of a specified object to another object or null.},
  language = {en-US},
  urldate = {2018-12-09},
  journal = {MDN Web Docs},
  url = {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf},
  author = {{Mozilla Developer Network}}
}
% == BibTeX quality report for MozillaDeveloperNetworkObjectsetPrototypeOf:
% Missing required field 'howpublished'
% Missing required field 'year'
% ? Title looks like it was stored in lower-case in Zotero

@misc{ElliottComposingSoftwareIntroduction2017,
  timestamp = {2018-12-11T20:08:41Z},
  title = {Composing {{Software}}: {{An Introduction}}},
  shorttitle = {Composing {{Software}}},
  abstract = {Note: This is the introduction to the ``Composing Software'' series on learning functional programming and compositional software techniques\ldots{}},
  urldate = {2018-12-11},
  journal = {JavaScript Scene},
  url = {https://medium.com/javascript-scene/composing-software-an-introduction-27b72500d6ea},
  author = {Elliott, Eric},
  month = may,
  year = {2017}
}
% == BibTeX quality report for ElliottComposingSoftwareIntroduction2017:
% Missing required field 'howpublished'
% ? Title looks like it was stored in title-case in Zotero

@inproceedings{BrachaMixinbasedInheritance1990,
  timestamp = {2018-12-11T20:14:17Z},
  address = {New York, NY, USA},
  series = {OOPSLA/ECOOP '90},
  title = {Mixin-Based {{Inheritance}}},
  isbn = {978-0-89791-411-6},
  doi = {10.1145/97945.97982},
  abstract = {The diverse inheritance mechanisms provided by Smalltalk, Beta, and CLOS are interpreted as different uses of a single underlying construct. Smalltalk and Beta differ primarily in the direction of class hierarchy growth. These inheritance mechanisms are subsumed in a new inheritance model based on composition of mixins, or abstract subclasses. This form of inheritance can also encode a CLOS multiple-inheritance hierarchy, although changes to the encoded hierarchy that would violate encapsulation are difficult. Practical application of mixin-based inheritance is illustrated in a sketch of an extension to Modula-3.},
  booktitle = {Proceedings of the {{European Conference}} on {{Object}}-Oriented {{Programming}} on {{Object}}-Oriented {{Programming Systems}}, {{Languages}}, and {{Applications}}},
  publisher = {{ACM}},
  author = {Bracha, Gilad and Cook, William},
  year = {1990},
  pages = {303--311}
}

@misc{FagnaniRealMixinsJavaScript2015,
  timestamp = {2018-12-11T21:12:33Z},
  title = {"{{Real}}" {{Mixins}} with {{JavaScript Classes}}},
  abstract = {How to build a simple, powerful, real mixin system for JavaScript and ES6 classes.},
  urldate = {2018-12-11},
  journal = {Justin Fagnani},
  url = {http://justinfagnani.com/2015/12/21/real-mixins-with-javascript-classes/},
  author = {Fagnani, Justin},
  month = dec,
  year = {2015}
}
% == BibTeX quality report for FagnaniRealMixinsJavaScript2015:
% Missing required field 'howpublished'
% ? Title looks like it was stored in title-case in Zotero

@misc{EnhancingMixinsDecorator2016,
  timestamp = {2018-12-11T21:51:42Z},
  title = {Enhancing {{Mixins}} with {{Decorator Functions}}},
  abstract = {Adding instanceof support and mixin caching to subclass factories with mixin decorator functions.},
  urldate = {2018-12-11},
  journal = {Justin Fagnani},
  url = {http://justinfagnani.com/2016/01/07/enhancing-mixins-with-decorator-functions/},
  month = jan,
  year = {2016}
}
% == BibTeX quality report for EnhancingMixinsDecorator2016:
% Missing required field 'author'
% Missing required field 'howpublished'
% ? Title looks like it was stored in title-case in Zotero

@misc{superconsideredhmmmful,
  timestamp = {2018-12-11T21:53:14Z},
  title = {Super() Considered Hmmm-Ful},
  urldate = {2018-12-11},
  url = {http://raganwald.com/2015/12/23/super-considered-hmmmful.html}
}
% == BibTeX quality report for superconsideredhmmmful:
% Missing required field 'author'
% Missing required field 'howpublished'
% Missing required field 'year'

@book{OsmaniLearningJavaScriptdesign2012,
  timestamp = {2018-12-15T10:13:55Z},
  address = {Sebastopol, CA},
  edition = {1st ed},
  title = {Learning {{JavaScript}} Design Patterns},
  isbn = {978-1-4493-3181-8},
  lccn = {QA76.73.J39 O86 2012},
  abstract = {"Explore many popular design patterns, including Modules, Observers, Facades, and Mediators. Learn how modern architectural patterns--such as MVC, MVP, and MVVM--are useful from the perspective of a modern web application developer. This book also walks you through modern module formats, how to namespace code effectively, and other essential topics: Learn the structure of design patterns and how they are written; Understand different pattern categories, including creational, structural, and behavioral; Walk through more than 20 classical and modern design patterns in JavaScript; Use several options for writing modular code--including the Module pattern, Asyncronous Module Definition (AMD), and CommonJS; Discover design patterns implemented in the jQuery library; Learn popular design patterns for writing maintainable jQuery plug-ins."--Publisher description},
  language = {en},
  publisher = {{O'Reilly Media}},
  author = {Osmani, Addy},
  year = {2012},
  keywords = {JavaScript (Computer program language),Computer software,Reusability,Scripting languages (Computer science),Software patterns},
  note = {OCLC: ocn794362585}
}

@misc{BorrowingMethodsJavaScript,
  timestamp = {2018-12-16T10:27:32Z},
  title = {Borrowing {{Methods}} in {{JavaScript}} by {{David Shariff}}},
  abstract = {Borrowing Methods in JavaScript - In JavaScript, sometimes it's desirable to reuse a function or method on a different object other than the object or prototype it was defined on. By...},
  language = {en-US},
  urldate = {2018-12-16},
  url = {https://davidshariff.com/blog/borrowing-methods-in-javascript/}
}
% == BibTeX quality report for BorrowingMethodsJavaScript:
% Missing required field 'author'
% Missing required field 'howpublished'
% Missing required field 'year'
% ? Title looks like it was stored in title-case in Zotero

@misc{Functionprototypebind,
  timestamp = {2018-12-16T10:29:05Z},
  title = {Function.Prototype.Bind()},
  abstract = {The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.},
  language = {en-US},
  urldate = {2018-12-16},
  journal = {MDN Web Docs},
  url = {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind}
}
% == BibTeX quality report for Functionprototypebind:
% Missing required field 'author'
% Missing required field 'howpublished'
% Missing required field 'year'
% ? Title looks like it was stored in lower-case in Zotero

@misc{MozillaDeveloperNetworkargumentsobject,
  timestamp = {2018-12-20T14:23:18Z},
  title = {The Arguments Object},
  abstract = {arguments is an Array-like object accessible inside functions that contains the values of the arguments passed to that function.},
  language = {en-US},
  urldate = {2018-12-16},
  journal = {MDN Web Docs},
  url = {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments},
  author = {{Mozilla Developer Network}}
}
% == BibTeX quality report for MozillaDeveloperNetworkargumentsobject:
% Missing required field 'howpublished'
% Missing required field 'year'

@book{SeibelCodersworkreflections2009,
  timestamp = {2018-12-16T15:43:46Z},
  address = {New York},
  title = {Coders at Work: Reflections on the Craft of Programming},
  isbn = {978-1-4302-1948-4 978-1-4302-1949-1},
  lccn = {HD8039.D37 S45 2009},
  shorttitle = {Coders at Work},
  abstract = {Presents an overview of computer programming and interviews with some of the well-known programmers currently working in the field as they discuss their experiences and techniques},
  publisher = {{Apress}},
  author = {Seibel, Peter},
  year = {2009},
  note = {OCLC: ocn286534539}
}

@book{CrockfordJavaScriptgoodparts2008,
  timestamp = {2018-12-16T15:48:43Z},
  address = {Beijing},
  edition = {1. ed},
  title = {{{JavaScript}}: The Good Parts ; [Unearthing the Excellence in {{JavaScript}}]},
  isbn = {978-0-596-51774-8},
  shorttitle = {{{JavaScript}}},
  language = {eng},
  publisher = {{O'Reilly}},
  author = {Crockford, Douglas},
  year = {2008},
  note = {OCLC: 255031813}
}

@misc{CrockfordClassicalInheritanceJavaScript,
  timestamp = {2018-12-16T15:51:55Z},
  title = {Classical {{Inheritance}} in {{JavaScript}}},
  urldate = {2018-12-16},
  url = {https://www.crockford.com/javascript/inheritance.html},
  author = {Crockford, Douglas}
}
% == BibTeX quality report for CrockfordClassicalInheritanceJavaScript:
% Missing required field 'howpublished'
% Missing required field 'year'
% ? Title looks like it was stored in title-case in Zotero

@misc{PurelyFunctionalComposition,
  timestamp = {2018-12-17T21:31:44Z},
  title = {Purely {{Functional Composition}}},
  urldate = {2018-12-17},
  url = {http://raganwald.com/2015/06/20/purely-functional-composition.html}
}
% == BibTeX quality report for PurelyFunctionalComposition:
% Missing required field 'author'
% Missing required field 'howpublished'
% Missing required field 'year'
% ? Title looks like it was stored in title-case in Zotero

@misc{ElliottFunctionalMixins2017,
  timestamp = {2018-12-18T19:46:55Z},
  title = {Functional {{Mixins}}},
  abstract = {Composing Software},
  urldate = {2018-12-18},
  journal = {JavaScript Scene},
  url = {https://medium.com/javascript-scene/functional-mixins-composing-software-ffb66d5e731c},
  author = {Elliott, Eric},
  month = jun,
  year = {2017}
}
% == BibTeX quality report for ElliottFunctionalMixins2017:
% Missing required field 'howpublished'
% ? Title looks like it was stored in title-case in Zotero

@misc{ElliottJavaScriptFactoryFunctions2017,
  timestamp = {2018-12-18T19:47:04Z},
  title = {{{JavaScript Factory Functions}} with {{ES6}}+},
  abstract = {Note: This is part of the ``Composing Software'' series on learning functional programming and compositional software techniques in\ldots{}},
  urldate = {2018-12-18},
  journal = {JavaScript Scene},
  url = {https://medium.com/javascript-scene/javascript-factory-functions-with-es6-4d224591a8b1},
  author = {Elliott, Eric},
  month = jul,
  year = {2017}
}
% == BibTeX quality report for ElliottJavaScriptFactoryFunctions2017:
% Missing required field 'howpublished'
% ? Title looks like it was stored in title-case in Zotero

@book{Steimann.2010,
  timestamp = {2018-12-20T13:38:42Z},
  address = {Hagen},
  title = {Objektorientierte {{Programmierung}}: {{Vorlesungsskript}} Zum {{Kurs}} 1814},
  publisher = {{Fernuniversit\"at Hagen}},
  author = {Steimann, Friedrich and Keller, Daniela},
  year = {2010}
}


